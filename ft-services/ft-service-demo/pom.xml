<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>com.hhwy</groupId>
        <artifactId>ft-services</artifactId>
        <version>3.0.2</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
	
    <artifactId>ft-service-demo</artifactId>

    <description>
        ft-service-demo模块
    </description>
	
    <dependencies>
        <!-- SpringCloud Alibaba Nacos -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>

        <!-- SpringCloud Alibaba Nacos Config -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>

        <!-- SpringCloud Alibaba Sentinel -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
        </dependency>

        <!-- SpringBoot Actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Swagger UI -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
        </dependency>

        <!-- Mysql Connector -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!-- FT Common DataSource -->
        <dependency>
            <groupId>com.hhwy</groupId>
            <artifactId>ft-common-datasource</artifactId>
        </dependency>

        <!-- FT Common DataScope -->
        <dependency>
            <groupId>com.hhwy</groupId>
            <artifactId>ft-common-datascope</artifactId>
        </dependency>

        <!-- FT Common Log -->
        <dependency>
            <groupId>com.hhwy</groupId>
            <artifactId>ft-common-log</artifactId>
        </dependency>

        <!-- FT Common Swagger -->
        <dependency>
            <groupId>com.hhwy</groupId>
            <artifactId>ft-common-swagger</artifactId>
        </dependency>

        <dependency>
            <groupId>com.hhwy</groupId>
            <artifactId>ft-api-activiti</artifactId>
        </dependency>

        <!-- FT Api file -->
        <dependency>
            <groupId>com.hhwy</groupId>
            <artifactId>ft-api-file</artifactId>
        </dependency>

        <dependency>
            <groupId>com.hhwy</groupId>
            <artifactId>ft-common-socket</artifactId>
        </dependency>

        <dependency>
            <groupId>com.hhwy</groupId>
            <artifactId>ft-common-tenant</artifactId>
        </dependency>

        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy</artifactId>
        </dependency>

        <dependency>
            <groupId>com.github.rholder</groupId>
            <artifactId>guava-retrying</artifactId>
        </dependency>

    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${build.plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <!--将插件绑定在某个phase执行-->
                <executions>
                    <execution>
                        <id>build-image</id>
                        <!--用户只需执行mvn package ，就会自动执行mvn docker:build-->
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--指定docker文件目录-->
                    <dockerDirectory>${project.parent.parent.basedir}/docker/demo</dockerDirectory>
                    <!--指定生成的镜像名-->
                    <imageName>ft/${project.artifactId}</imageName>
                    <!--指定标签-->
                    <imageTags>
                        <imageTag>v1.2.0</imageTag>
                    </imageTags>
                    <forceTags>true</forceTags>    <!--覆盖相同标签镜像-->
                    <!--指定远程 docker api地址-->
                    <dockerHost>http://192.168.1.47:2375</dockerHost>
                    <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <!--jar 包所在的路径  此处配置的 即对应 target 目录-->
                            <directory>${project.build.directory}</directory>
                            <!-- 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　-->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>
   
</project>